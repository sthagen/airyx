#!/bin/sh
#
# Configure wifi via dialogs
#
# For debugging purposes, pass `-d` as parameter to the script,
# in which case it will behave as if you are root and invent
# some wifi devices for you.
#

### COMMAND-LINE ARGUMENTS
#
#
if [ "x$1" = "x-d" ] ; then
  # In debug-mode, 
  #   - pretend we're root
  #   - bogus wifi devices     
  is_user() { 
    false
  }
  get_wireless() {
    echo "em0"
  }
else
  is_user() { 
    test "$(id -u)" != "0" 
  }
  get_wireless() {
    sysctl -b net.wlan.devices
  }
fi

### RUN-TIME DEPENDENCIES
#
# Based on the available tooling, defines the following functions:
#   - warning <text>
#     Displays the <text> as a warning, no output, no return value
#   - ask_wifi_list <filename>
#     Displays the interfaces from <filename> (one per line), pick one,
#     outputs the item that was selected, no return value
#
if test -x /usr/bin/zenity ; then
  warning() {
    /usr/bin/zenity --warning --no-wrap --text="$1"
  }
  ask_wifi_list() {
    cat "$1" | zenity --list --width=640 --height=480 \
      --title="FuryBSD Wifi Tool" \
      --text="Detected wifi devices" \
      --column="Module" 
  }
elif test -x /usr/bin/kdialog ; then
  warning() {
    /usr/bin/kdialog --title "FuryBSD Wifi Tool" --error "$1"
  }
  ask_wifi_list() {
    # KDialog uses <tag> <text> <state> triplets, so we need to
    # expand the interface names to triples; assume no spaces in interfaces.
    kdialog --title "FuryBSD Wifi Tool" --radiolist "Detected wifi devices" \
      `awk '{ print $1" "$1" off"; }' "$1"`
  }
else
  echo "No suitable GUI found" 1>&2
  exit 1
fi

### SCRIPT PROPER
#
#
# Only run as superuser
if is_user ; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

rm /tmp/wifi-devices-found.list 2>/dev/null || true
rm /tmp/wifi-selection 2>/dev/null || true
rm /tmp/wlan-selection 2>/dev/null || true

# Check for no wifi devices and exit if none found

wnic=$(get_wireless)
if [ "$?" -eq 0 ] && [ -z "${wnic}" ] ; then
  warning "No wlan devices found"
  exit 0
fi

# Check for existing wifi devices in rc.conf
grep -q "^wlans" /etc/rc.conf
if [ $? -eq 0 ] ; then
  WLANCOUNT=$(cat /etc/rc.conf | grep "^wlans_" | wc -l | awk '{print 1}')
else
  WLANCOUNT="0"
fi
WLAN="wlan${WLANCOUNT}"


# Check for any new wifi devices to setup
for wnic in `get_wireless 2>/dev/null`
do
  echo ${wnic} >> /tmp/wifi-devices-found.list
done

# Present list of detected wifi devices
ask_wifi_list /tmp/wifi-devices-found.list | tee /tmp/wifi-selection

# Now configure the wifi device in rc.conf based on user selection
wnic=$(cat /tmp/wifi-selection)
if [ "$?" -eq 0 ] && [ -z "${wnic}" ] ; then
  exit 0
fi
cat /etc/rc.conf 2>/dev/null | grep -q "wlans_${wnic}="
if [ $? -ne 0 ] ; then
  sysrc wlans_${wnic}="${WLAN}"
  sysrc ifconfig_${WLAN}="WPA SYNCDHCP inet6 accept_rtadv"
  service netif restart ${WLAN}
  cat /etc/rc.conf | grep ${wnic} | cut -d'"' -f2 > /tmp/wlan-selection
  WLAN=$(cat /tmp/wlan-selection)
  ifconfig ${WLAN} up scan
  killall wpa_gui 2>/dev/null || true
  wpa_gui -i ${WLAN}
else
  cat /etc/rc.conf | grep ${wnic} | cut -d'"' -f2 > /tmp/wlan-selection
  WLAN=$(cat /tmp/wlan-selection)
  ifconfig ${WLAN} up scan
  killall wpa_gui 2>/dev/null || true
  wpa_gui -i ${WLAN}
fi

rm /tmp/wifi-devices-found.list 2>/dev/null || true
rm /tmp/wifi-selection 2>/dev/null || true
rm /tmp/wlan-selection 2>/dev/null || true
