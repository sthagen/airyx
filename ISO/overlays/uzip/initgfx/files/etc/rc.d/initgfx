#!/bin/sh
#
# Copyright (c) 2020, The NomadBSD Project
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# PROVIDE: initgfx
# REQUIRE: LOGIN
# BEFORE: slim

. /etc/rc.subr

name=initgfx
start_cmd="do_initgfx"

rcvar=initgfx_enable

load_rc_config ${name}

: ${initgfx_enable:="YES"}

path_config_id="/var/initgfx_config.id"
path_xorg_cfg_dir="/etc/X11/xorg.conf.d"
path_xorg_cfg="${path_xorg_cfg_dir}/10-video-${name}.conf"

path_drm_legacy="/boot/drm_legacy"
path_nvidia="/usr/local/nvidia"

path_initgfx_xorg_templates="/etc/${name}_xorg.cfg"
path_initgfx_device_db="/etc/${name}_device.db"

path_cfg_test_dir="/tmp/${name}.$$"
path_tmp_rc_conf="/tmp/rc.conf.$$"

# Include device info DB
. ${path_initgfx_device_db}

# Include Xorg config file templates
. ${path_initgfx_xorg_templates}

initgfx_warn()
{
	echo "${name}:" $* >&2
}

initgfx_debug()
{
	echo "${name}:" $* >&2
}

del_stale_files()
{
	rm -f "/usr/local/etc/libmap.d/nvidia.conf" > /dev/null 2>&1
	rm -f "${path_xorg_cfg}" > /dev/null 2>&1
	rm -f "${path_config_id}" > /dev/null 2>&1
}

calc_config_id()
{
	sysctl dev.vgapci | sort | md5
}

check_configured()
{
	local prev_id curr_id
	[ ! -f "${path_config_id}" ] && return 1
	prev_id=$(cat "${path_config_id}")
	curr_id=$(calc_config_id)
	[ "${prev_id}" = "${curr_id}" ] && return 0
	initgfx_debug "System configuration changed"
	return 1
}

save_config_id()
{
	calc_config_id > "${path_config_id}"
	sync
}

set_kldconfig_path()
{
	local path
	path=$(realpath -q "$1")
	[ -z "${path}" ] && return
	if [ ! -d "${path}" ]; then
		mod_dir=$(dirname "${path}")
	else
		mod_dir=${path}
	fi
	if ! (kldconfig -r | grep -q "${mod_dir}"); then
		kldconfig -im ${mod_dir} >/dev/null 2>&1
	fi
}

test_x()
{
	local cmd

	if [ ! -d "${path_cfg_test_dir}" ]; then
		mkdir "${path_cfg_test_dir}" 2>/dev/null
	fi
	cp "${path_xorg_cfg}" "${path_cfg_test_dir}"
	if [ -x /usr/bin/xmessage ]; then
		cmd="/usr/bin/xmessage -buttons '' -timeout 3"
		cmd="${cmd} -center 'Please wait ...'"
	else
		cmd="sleep 3"
	fi
	PATH="${PATH}:/usr/local/bin" /usr/bin/xinit \
		/bin/sh -c "${cmd}; /usr/bin/true" -- -configdir \
			"${path_cfg_test_dir}"
}

get_device_info()
{
	unit=$(sysctl -n hw.pci.default_vgapci_unit)
	[ -z "$unit" -o "$unit" =  "-1" ] && unit=0
	local info=$(pciconf -lv | grep "^vgapci${unit}" | awk -F'[ \t]+' ' {
		for (i = 1; i <= NF; i++) {
			if ($i ~ /^vgapci[0-9]/) {
				if (split($i, a, ":") < 4)
					exit(1);
				busID = sprintf("%d:%d:%d", a[2], a[3], a[4])
			} else if ($i ~ /^chip=/) {
				device = substr($i, 8, 4);
				vendor = substr($i, 12, 4);
			} else if ($i ~ /^vendor=/) {
				split($i, a, /=0x/);
				vendor = a[2];
			} else if ($i ~ /^device=/) {
				split($i, a, /=0x/);
				device = a[2];
			}
		}
	}
	END {
		printf("%s %s %s", busID, vendor, device);
	}')
	set -- $info
	device=$3; vendor=$2; busID=$1
	if [ -z "${vendor}" -o -z "${device}" -o -z "${busID}" ]; then
		echo "${name}: Error parsing 'pciconf' output"
		exit 1
	fi
}

rc_conf_d_ldconfig()
{
cat << rc_conf_d_END
#!/bin/sh
ldconfig_paths="\${ldconfig_paths} $1"
rc_conf_d_END
}

__wait()
{
	n=$1
	while [ $n -gt 0 ]; do
		printf "\rWaiting %02d seconds" $n
		n=$((n - 1))
		sleep 1
	done
	echo
}

setup_intel()
{
	local kmod

	[ "${vendor}" != 8086 ] && return 1
	if i915_drm_legacy_ids | grep -iq ${device}; then
		xorg_cfg_intel > "${path_xorg_cfg}"
	else
		xorg_cfg_modesetting > "${path_xorg_cfg}"
	fi
	kmod="/boot/modules/i915kms.ko"
	set_kldconfig_path "${kmod}"
	kldload "${kmod}"
	sysrc -f "${path_tmp_rc_conf}" initgfx_kmods="${kmod}"
	sync
	return 0
}

setup_ati_amd()
{
	local path driver kmod

	[ "${vendor}" != 1002 ] && return 1
	if radeon_ids | grep -iq ${device}; then
		driver="ati"
		kmod="/boot/modules/radeonkms.ko"
	else
		driver="amd"
		kmod="/boot/modules/amdgpu.ko"
	fi
	kldload ${kmod}
	sysrc -f "${path_tmp_rc_conf}" initgfx_kmods="${kmod}"
	eval ${driver}_xorg_cfg > "${path_xorg_cfg}"
	sync
	return 0
}

setup_nvidia()
{
	local d dir driver device srcdir

	[ "${vendor}" != "10de" ] && return 1
	device=$(pciconf -lv | grep -A3 ^vgapci${unit} | grep device | \
		cut -d"'" -f 2)
	driver=""
	for d in 440 390 340 304; do
		nvidia_${d}_ids | awk -v device="$device" '
			match(tolower(device), tolower($0)) > 0 {
				printf("%s ~ %s\n", device, $0);
				exit(100)
			}
		'
		if [ $? -eq 100 ]; then
			driver=$d
			break
		fi
	done
	[ -z "${driver}" ] && return 1
	[ ! -d /usr/local/etc/libmap.d ] && mkdir /usr/local/etc/libmap.d

	srcdir="${path_nvidia}/${driver}"

	dir=/usr/local/etc/libmap.d 
	tar -C ${srcdir}${dir} -cf - . | tar -C ${dir} -xf -

	rc_conf_d_ldconfig ${srcdir}/usr/local/lib > \
		/etc/rc.conf.d/ldconfig
	ldconfig -m /usr/local/nvidia/${driver}/usr/local/lib

	dir=/usr/lib/xorg/modules/drivers
	# Restore symlink if it was removed or overwritten
	if [ ! -L "${dir}/nvidia_drv.so" ]; then
		if [ ! -d "/nvidia/${dir}" ]; then
			mkdir -p "/nvidia/${dir}"
		fi
		rm -f "${dir}/nvidia_drv.so"
		ln -s "/nvidia/${dir}/nvidia_drv.so" "${dir}/"
	fi
	tar -C "${srcdir}${dir}" -cf - . | tar -C "/nvidia/${dir}" -xf -
	dir=/usr/lib/xorg/modules/extensions

	# Restore symlink if it was removed or overwritten
	for l in libglx.so libglx.so.1 libglxserver_nvidia.so \
			 libglxserver_nvidia.so.1; do
		if [ ! -L "${dir}/$l" ]; then
			if [ ! -d "/nvidia/${dir}" ]; then
				mkdir -p "/nvidia/${dir}"
			fi
			rm -f "${dir}/$l"
			ln -s "/nvidia/${dir}/$l" "${dir}/"
		fi
	done
	tar -C "${srcdir}${dir}/.nvidia" -cf - . | tar -C "/nvidia/${dir}" -xf -
	tar -C "${srcdir}${dir}" \
		--exclude '.nvidia' -cf - . | tar -C "/nvidia/${dir}" -xf -

	if [ ${driver} -ge 390 ]; then
		kmods="${srcdir}/boot/modules/nvidia.ko"
		kmods="${kmods} ${srcdir}/boot/modules/nvidia-modeset.ko"
	else
		# nvidia 340 or 304 driver needed
		kmods="${srcdir}/boot/modules/nvidia.ko"
	fi
	kldload ${kmods}
	sysrc -f "${path_tmp_rc_conf}" initgfx_kmods="${kmods}"
	nvidia_xorg_cfg > "${path_xorg_cfg}"
	return 0
}

is_vm()
{
	pciconf -lv | grep -B3 display | grep -E -q -i 'virtualbox|VMware'
}

get_fallback_driver()
{
	if sysctl machdep.bootmethod | grep -q BIOS; then
		fallback_driver="vesa"
	else
		fallback_driver="scfb"
	fi
}

write_fallback_cfg()
{
	(printf "Section \"Device\"\n"; \
	 printf "\tIdentifier \"Card0\"\n"; \
	 printf "\tDriver \"${fallback_driver}\"\n"; \
	 printf "\tBusID \"PCI:$busID\"\n"; \
	 printf "EndSection\n") > "${path_xorg_cfg}"
}

do_initgfx()
{
	unalias echo
	if [ "$(kenv -q initgfx.detect.disable)" = "1" ]; then
		del_stale_files
		get_device_info
		if ! is_vm; then
			get_fallback_driver
			write_fallback_cfg
		fi
		return
	fi
	if check_configured; then
		initgfx_debug "Using previous configuration ..."
		for m in ${initgfx_kmods}; do
			set_kldconfig_path $m
			kldload $m
		done
		return
	fi
	initgfx_debug "Creating new configuration ..."
	del_stale_files
	cp -a /etc/rc.conf "${path_tmp_rc_conf}"

	# In VirtualBox and VMware we are done here
	if is_vm; then
		save_config_id
		return
	fi
	get_fallback_driver
	initgfx_debug "Auto-detecting graphics driver ..."
	get_device_info

	# Prepare for a crash.
	for i in nvidia ati_amd intel; do
		if setup_${i}; then
			initgfx_debug "Testing Xorg configuration ..."
			if test_x; then
				# FIXME: Without the delay the result is a
				# reboot when using a Nvidia GPU.
				__wait 3
				save_config_id
				cp -a "${path_tmp_rc_conf}" /etc/rc.conf
				return
			else
				initgfx_warn "Failed to use $i driver. " \
							 "Using ${fallback_driver} instead ..." >&2
				del_stale_files
			fi
			break
		fi
	done
	write_fallback_cfg
	cp -a "${path_tmp_rc_conf}" /etc/rc.conf
	sysrc -x initgfx_kmods
}

run_rc_command "$1"
