#!/usr/bin/env python3


# USAGE: app get firefox
# This puts together an .app bundle using ingredients from pkg


# Copyright (c) 2020-2021, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os, sys, stat, shutil, subprocess, plistlib, tempfile, getpass
from xdg import IniFile, IconTheme  # pkg install py37-xdg


def d2a(desktopfile, destination):

    IconTheme.icondirs = [os.path.dirname(os.path.dirname(desktopfile)) + "/icons", os.path.dirname(os.path.dirname(desktopfile)) + "/pixmaps"]

    i = IniFile.IniFile()

    i.parse(desktopfile)

    if not "Desktop Entry" in i.content.keys():
        print("No Desktop Entry section, hence skipping '%s'" % desktopfile)
        return None

    if "Name" in i.content["Desktop Entry"].keys():
        name = i.content["Desktop Entry"]["Name"]
    else:
        print("No Name=..., hence skipping '%s'" % desktopfile)
        return None
    if "Exec" in i.content["Desktop Entry"].keys():
        exec = i.content["Desktop Entry"]["Exec"]
        exec = exec.replace(" %f", "").replace(" %F", "").replace(" %u", "").replace(" %U", "")
    else:
        print("No Exec=..., hence skipping '%s'" % desktopfile)
        return None
    if "Comment" in i.content["Desktop Entry"].keys():
        description = i.content["Desktop Entry"]["Comment"]
    else:
        description = name
    if "Icon" in i.content["Desktop Entry"].keys():
        icon = i.content["Desktop Entry"]["Icon"]
    else:
        print("No Icon=..., hence skipping '%s'" % desktopfile)
        return None
    iconfile = IconTheme.getIconPath(icon, size=48, extensions=['png'])
    svgiconfile = IconTheme.getIconPath(icon, size=48, extensions=['svg'])

    # What we have got may be symlinks. Example: firefox pkg.
    # Those may point to /usr/local/..., hence we need to prefix them
    # Borrowed from https://github.com/pypa/virtualenv/commit/04ce79630d6aa1df87a6bb44a550353c1961953e

    if iconfile != None:
        while os.path.islink(iconfile):
            iconfile = os.path.join(os.path.dirname(iconfile), os.readlink(iconfile))
        iconfile = os.path.abspath(iconfile)

    if svgiconfile != None:
        while os.path.islink(svgiconfile):
            svgiconfile = os.path.join(os.path.dirname(svgiconfile), os.readlink(svgiconfile))
        svgiconfile = os.path.abspath(svgiconfile)

    if svgiconfile == None and (iconfile == None or os.path.exists(iconfile) == False):

        print("The icon '%s' does not exist at %s" % (icon, iconfile))
        return None
    else:
        if iconfile == None or os.path.exists(iconfile) == False:
            if os.path.exists(svgiconfile) == False:
                print("The icon '%s' does not exist at %s" % (icon, iconfile))
                return None

    if "MimeType" in i.content["Desktop Entry"].keys():
        mime = i.content["Desktop Entry"]["MimeType"]
    else:
        mime = None
    if i.content["Desktop Entry"]["Type"] != "Application":
        print("Not using %s because it is not an application" % desktopfile)
        return None

    print("Using %s" % desktopfile)

    if os.path.isdir('%s/%s.app' % (destination, name)):
        try:
            print("Removing pre-existing .app bundle '%s/%s.app'" % (destination, name))
            shutil.rmtree("%s/%s.app" % (destination, name))
        except:
            print("Could not remove pre-existing .app bundle, exiting")
            return None

    try:
        os.makedirs("%s/%s.app/Resources" % (destination, name))
    except:
        print("Could not create .app bundle, exiting")
        return None

    if iconfile == None and svgiconfile == None:
        print("Could not find a suitable icon for %s', exiting" % icon)
        return
    elif iconfile != None:
        print("Using icon from %s" % iconfile)
        shutil.copyfile(iconfile, ("%s/%s.app/Resources/%s.png" % (destination, name, name)))
    elif iconfile == None and svgiconfile != None:
        print("Could not find a png icon for '%s', converting '%s' to png" % (icon, svgiconfile))
        try:
            subprocess.call(["rsvg-convert", "-a", "-w", "48", "-h", "48", svgiconfile, "-o", ("%s/%s.app/Resources/%s.png" % (destination, name, name))])
        except:
            print("The conversion of '%s' to png failed. Is rsvg-convert installed?")
            return None


    launcher = """#!/bin/sh

# Copyright (c) 2020-2021, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

set -e # Exit on errors

# Something better than the following is needed; ideally something that does not
# require root rights. Are there per-process namespaces in FreeBSD? Can we use Jails?

HERE="$(dirname "$(readlink -f "${0}")")"
if [ -z "${XDG_RUNTIME_DIR}" ] ; then
  XDG_RUNTIME_DIR=/var/run/user/$(id -u)
fi
THERE=$(mktemp -d "${XDG_RUNTIME_DIR}/XXXXXXXX")
CHROOT="${THERE}/chroot"

# The finish function runs whenever this script exits
finish()
{
  sudo umount -f "${CHROOT}/bin"
  sudo umount -f "${CHROOT}/var"
  sudo umount -f "${CHROOT}/home"
  sudo umount -f "${CHROOT}/tmp"
  sudo umount -f "${CHROOT}/lib"
  sudo umount -f "${CHROOT}/usr"
  sudo umount -f "${CHROOT}/etc"
  sudo umount -f "${CHROOT}/libexec"
  rm -r "${THERE}"
  sleep 1
}
trap finish EXIT

mkdir -p "${CHROOT}/bin"
mkdir -p "${CHROOT}/var"
mkdir -p "${CHROOT}/home"
mkdir -p "${CHROOT}/tmp"
mkdir -p "${CHROOT}/lib"
mkdir -p "${CHROOT}/usr"
mkdir -p "${CHROOT}/etc"
mkdir -p "${CHROOT}/libexec"
sudo mount -t nullfs /bin "${CHROOT}/bin"
sudo mount -t nullfs /bin "${CHROOT}/var"
sudo mount -t nullfs /home "${CHROOT}/home"
sudo mount_nullfs /tmp "${CHROOT}/tmp" # for /tmp/.X11-unix
sudo mount -t nullfs /lib "${CHROOT}/lib"
sudo mount -t nullfs /etc "${CHROOT}/etc"
sudo mount -t nullfs /libexec "${CHROOT}/libexec"
sudo "${HERE}/Resources/Root/usr/local/bin/unionfs" -o ro,allow_other "/usr:${HERE}/Resources/Root/usr" "${CHROOT}/usr" # Why is sudo needed here?
# Why does it need: export LD_LIBRARY_PATH=/usr/local/lib:/usr/local/nvidia/440/usr/local/lib/
sudo chroot -u "${USER}" "${CHROOT}" "%EXEC%" "$@"
"""

    launcher_path = ("%s/%s.app/%s" % (destination, name, name))
    launcher_file = open(launcher_path, "w")
    launcher_file.write(launcher.replace("%EXEC%", exec))
    launcher_file.close()

    # Set executable bit
    os.chmod(launcher_path,
             stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH | stat.S_IWUSR)

    # TODO: Handle MIME types and file associations more adequately.
    # Again, it is refreshing to see how straightforward things are in GNUstep compared to XDG,
    # e.g., how easy an application can set the file types it understands, define what those files
    # are called, and which icons to use to represent them. What is imlemented below is the bare minimum
    # to get things going. Feel free to implement more.
    nstypes = []
    if mime != None:
        mimetypes = mime.split(";")
        mimetypes = [x for x in mimetypes if x] # Remove empty items
        nstypes = [{"NSDocumentClass": ("%sDocument" % name.replace(" ", "")), "NSName": ("MIME type %s understands" % name), "NSHumanReadableName": ("MIME type %s understands" % name), "NSMIMETypes": mimetypes}]

    properties = {
        "ApplicationName": name,
        "ApplicationDescription": description,
        "NSExecutable": name,
        "NSIcon": name + ".png",
        "XAppWrapper": True,
        "NSTypes": nstypes
    }
    fileName = open("%s/%s.app/Resources/Info-gnustep.plist" % (destination, name), 'wb')
    plistlib.dump(properties, fileName)
    fileName.close()

    return(name)


if __name__ == "__main__":

    destination = "."

    if len(sys.argv) < 3:
        print("USAGE: %s get <name of the application package on pkg>" % sys.argv[0])
        exit(1)

    if sys.argv[1] == "get":

        pkg_name = sys.argv[2]

        sub_env = os.environ.copy()
        temp_dir = tempfile.mkdtemp()

        # Download from pkg

        try:
            # Without sudo, getting:
            # pkg: Insufficient privileges to access repo catalogue. Why?
            subprocess.call(["sudo", "pkg", "fetch", "-d", "-y", "--output", temp_dir, pkg_name, "fusefs-unionfs"]) # -d for dependencies pulls in ALL dependencies. Do we want that?
        except:
            print("Could not run pkg")
            exit(1)

        try:
            subprocess.call(["sudo", "chown", "-R", getpass.getuser(), temp_dir])
        except:
            print("Could not change owner on %s", temp_dir)
            exit(1)


        # Find the pkgs and extract them

        files = os.listdir(temp_dir + "/All")

        print(files)

        for file in files:
            file = temp_dir + "/All/" + file
            if file.endswith(".txz") and os.path.isfile(file):
                try:
                    print("Extracting %s: .... " % file)
                    if not os.path.exists(temp_dir + "/Root"):
                        os.makedirs(temp_dir + "/Root")
                    subprocess.call(["tar", "xf", file, "-C", temp_dir + "/Root"])
                    os.unlink(file)
                except:
                    print("Could not extract '%s'" % file)
                    exit(1)
            elif os.path.islink(file):
                os.unlink(file)

        desktop_file = None

        try:
            desktop_file_candidates = os.listdir(temp_dir + "/Root/usr/local/share/applications/")
        except:
            print("Cannot find '%s', did the extraction succeed?" % (temp_dir + "/Root/usr/local/share/applications/"))
            exit(1)

        # First, look for desktop files with the name of the requested package
        for desktop_file_candidate in desktop_file_candidates:
            if desktop_file_candidate == pkg_name + ".desktop":
                desktop_file = desktop_file_candidate

        # Second, look for desktop files with the nae of the requested packge in reverse-DNS format
        for desktop_file_candidate in desktop_file_candidates:
            if desktop_file == None:
                parts = desktop_file_candidate.split(".")
                length = len(parts)
                if "".join(parts[length - 2:length - 1]) == pkg_name:
                    desktop_file = desktop_file_candidate
                    break
        # Third, take a random one
        for desktop_file_candidate in desktop_file_candidates:
            if desktop_file == None:
                desktop_file = desktop_file_candidate
                break

        if desktop_file == None:
            print("Could not find a desktop file for %s" % pkg_name)

        desktop_file = temp_dir + "/Root/usr/local/share/applications/" + desktop_file

        nice_name = d2a(desktop_file, ".")

        if nice_name == None:
            print("Could not deploy to .app bundle")
            exit(1)

        # Create /tmp in the AppDir so that we can mount the real /tmp there later; Xorg needs this
        if os.path.exists(temp_dir + "/Root/tmp") == False:
            os.mkdir(temp_dir + "/Root/tmp")

        shutil.move(temp_dir + "/Root", "./%s.app/Resources/" % nice_name)

        shutil.rmtree(temp_dir)

        print("'%s.app' has been created." % nice_name)
        print("You can open it by double-clicking it or by typing:\nlaunch ./'%s.app'" % nice_name)
        print("FIXME: This is currently not working properly yet")

        exit(0)
