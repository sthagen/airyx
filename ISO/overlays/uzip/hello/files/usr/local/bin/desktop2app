#!/usr/local/bin/python3

# Copyright (c) 2020-2021, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# Note that the shebang cannot be /usr/bin/env ... if this script is intended to
# be run by rc.d

# This implements enough of the XDG spec to create .app bundles for desktop files.
# If someone cares enough about the convoluted XDG spec to implement it more fully,
# https://github.com/jceb/dex/blob/master/dex might be a good starting point.
# It is refreshing to see how straightforward things are in GNUstep compared to XDG.

# USAGE: $0 <desktop file or directory containing desktop files> [<destination directory>]
# or, to watch the system for new desktop files, just call it without arguments


import os, sys, stat, shutil, subprocess, plistlib, signal, time
from xdg import IniFile, IconTheme  # pkg install py37-xdg


# Create .app bundles for desktop files

def d2a(desktopfile, destination, use_generic_name=False, name=None):
    i = IniFile.IniFile()

    i.parse(desktopfile)

    if not "Desktop Entry" in i.content.keys():
        print("No Desktop Entry section, hence skipping '%s'" % desktopfile)
        return False
        
    if name == None:
        if use_generic_name == True:
            print("Using GenericName= if available")
            if "GenericName" in i.content["Desktop Entry"].keys():
                print("Using GenericName")
                name = i.content["Desktop Entry"]["GenericName"]
            else:
                print("No GenericName=..., hence using Name=")
                use_generic_name = False

        if use_generic_name == False:
            if "Name" in i.content["Desktop Entry"].keys():
                name = i.content["Desktop Entry"]["Name"]
            else:
                print("No Name=..., hence skipping '%s'" % desktopfile)
                return False
                
    if "Exec" in i.content["Desktop Entry"].keys():
        exec = i.content["Desktop Entry"]["Exec"]
        exec = exec.replace(" %f", "").replace(" %F", "").replace(" %u", "").replace(" %U", "")
        print("exec: %s" % exec)
    else:
        print("No Exec=..., hence skipping '%s'" % desktopfile)
        return False
    if "Comment" in i.content["Desktop Entry"].keys():
        description = i.content["Desktop Entry"]["Comment"]
    else:
        description = name
    if "Icon" in i.content["Desktop Entry"].keys():
        icon = i.content["Desktop Entry"]["Icon"]
    else:
        print("No Icon=..., hence skipping '%s'" % desktopfile)
        return False

    # FIXME: Do not hardcode the name of the theme here;
    # seemingly PyQt5 can give us icons from the currently selected Qt theme;
    # hence we need to rewrite the icon retrieval part in PyQt5
    iconfile = IconTheme.getIconPath(icon, size=128, extensions=['png'], theme='elementary-xfce')
    svgiconfile = IconTheme.getIconPath(icon, extensions=['svg'], theme='elementary-xfce')

    if svgiconfile == None and (iconfile == None or os.path.exists(iconfile) == False):

        print("The icon '%s' does not exist" % icon)
        print("svgiconfile: '%s'" % svgiconfile)
        print("iconfile: '%s'" % iconfile)
        if iconfile != None:
            print("os.path.exists(iconfile) '%s':" % os.path.exists(iconfile))
        return False
    else:
        if iconfile == None or os.path.exists(iconfile) == False:
            if os.path.exists(svgiconfile) == False:
                print("The icon '%s' does not exist" % icon)
                return False

    if "MimeType" in i.content["Desktop Entry"].keys():
        mime = i.content["Desktop Entry"]["MimeType"]
    else:
        mime = None
    if i.content["Desktop Entry"]["Type"] != "Application":
        print("Not using %s because it is not an application" % desktopfile)
        return False

    print("Using %s" % desktopfile)

    if os.path.isdir('%s/%s.app' % (destination, name)):
        try:
            print("Removing pre-existing .app bundle '%s/%s.app'" % (destination, name))
            shutil.rmtree("%s/%s.app" % (destination, name))
        except:
            print("Could not remove pre-existing .app bundle. Missing permissions? exiting")
            return False

    try:
        os.makedirs("%s/%s.app/Resources" % (destination, name))
    except:
        print("Could not create .app bundle. Missing permissions? Exiting")
        return False

    if iconfile == None and svgiconfile == None:
        print("Could not find a suitable icon for %s', exiting" % icon)
        return False
    if svgiconfile != None:
        print("Using icon from %s" % iconfile)
        shutil.copyfile(svgiconfile, ("%s/%s.app/Resources/%s.svg" % (destination, name, name)))
    if iconfile != None:
        print("Using icon from %s" % iconfile)
        shutil.copyfile(iconfile, ("%s/%s.app/Resources/%s.png" % (destination, name, name)))


    launcher_path = ("%s/%s.app/%s" % (destination, name, name))
    os.symlink("/usr/local/libexec/app-placeholder", launcher_path)

    # Determine the absolute path to the executable file of the application that is being wrapped
    p = subprocess.Popen(['which', exec.split(" ")[0]], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) # FIXME: Is there a better way to get this, e.g., from 'pkg which'?
    result, err = p.communicate()
    full_path_of_executable = result.decode('utf-8').strip()
    if(p.returncode != 0):
        print("Could not get the absolute path of the executable", file=sys.stderr)
        exit(1)
    executable_file_path = ("%s/%s.app/Resources/executable" % (destination, name))
    executable_file = open(executable_file_path, "w")
    executable_file.write(full_path_of_executable)
    executable_file.close()

    # Determine the package name of the application that is being wrapped
    p2 = subprocess.Popen(['pkg', 'which', full_path_of_executable], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE) # FIXME: Is there a better way to get this, e.g., from 'pkg which'?
    result, err = p2.communicate()
    parts = result.decode('utf-8').strip().split(" ")
    package_name_parts = parts[len(parts)-1].split("-")
    package_name = "-".join(package_name_parts[0:len(package_name_parts)-1]) # FIXME: Is there a better way to emove the version number suffix correctly?
    if(p.returncode != 0):
        print("Could not determine the package name for the executable", file=sys.stderr)
        # This happens e.g., when we are converting an application that was not installed via pkg
        package_name=""
    packages_file_path = ("%s/%s.app/Resources/packages" % (destination, name))
    packages_file = open(packages_file_path, "w")
    packages_file.write(package_name)
    packages_file.close()

    # Set executable bit
    # os.chmod(launcher_path,
    #          stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH | stat.S_IWUSR)

    # TODO: Handle MIME types and file associations more adequately.
    # Again, it is refreshing to see how straightforward things are in GNUstep compared to XDG,
    # e.g., how easy an application can set the file types it understands, define what those files
    # are called, and which icons to use to represent them. What is imlemented below is the bare minimum
    # to get things going. Feel free to implement more.
    nstypes = []
    if mime != None:
        mimetypes = mime.split(";")
        mimetypes = [x for x in mimetypes if x] # Remove empty items
        nstypes = [{"NSDocumentClass": ("%sDocument" % name.replace(" ", "")), "NSName": ("MIME type %s understands" % name), "NSHumanReadableName": ("MIME type %s understands" % name), "NSMIMETypes": mimetypes}]

    properties = {
        "ApplicationName": name,
        "ApplicationDescription": description,
        "NSExecutable": name,
        "NSIcon": name + ".png",
        "XAppWrapper": True,
        "NSTypes": nstypes
    }
    fileName = open("%s/%s.app/Resources/Info-gnustep.plist" % (destination, name), 'wb')
    plistlib.dump(properties, fileName)
    fileName.close()

    print("Wrapper placed in %s/%s.app" % (destination, name))
    return True


well_known_desktop_file_locations = [
    '/usr/local/share/applications/',
]

def checkIfProcessRunning(processName):
    '''
    Check if there is any running process that contains the given name processName.
    '''
    #Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if processName.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False

def directory_changed(path):
    print('Directory Changed: %s' % path)
    current_desktop_files_in_system = get_desktop_files_in_system()
    for df in current_desktop_files_in_system:
        if not df in handled_desktop_files_in_system:
            if df.endswith(".desktop") and os.path.exists(df):
                # print("%s has not been handled yet" % df)
                while checkIfProcessRunning("pkg"):
                    time.sleep(3)
                    print("Waiting for pkg process to exit...")
                time.sleep(1)
                print("Creating wrapper for' %s'" % (df))
                try:
                    d2a(df, "/Applications/")
                    handled_desktop_files_in_system.append(df)
                except:
                    pass

def get_desktop_files_in_system():
    all_desktopfiles = []
    for path in well_known_desktop_file_locations:
        desktopfiles = [os.path.join(path, f) for f in os.listdir(path) if
                        os.path.isfile(os.path.join(path, f))]
        for d in desktopfiles:
            all_desktopfiles.append(d)
    return(all_desktopfiles)

handled_desktop_files_in_system = []

if __name__ == "__main__":

    destination = "."
    use_generic_name = False
    
    if "-g" in sys.argv:
        use_generic_name = True
        sys.argv.remove("-g")

    if len(sys.argv) < 2:
        # Using Qt for QFileSystemWatcher as long as
        # https://people.freebsd.org/~dwhite/PyKQueue/
        # is unmaintained and not available for python3
        try:
            from PyQt5 import QtCore
        except:
            print("Cannot watch the system for newly installed applications since PyQt5 is missing.")
            exit(1)

        try:
            import psutil
        except:
            print("Cannot watch the system for newly installed applications since py37-psutil is missing.")
            exit(1)

        signal.signal(signal.SIGINT, QtCore.QCoreApplication.quit) # FIXME: Make Ctrl-C work; Does not seem to work

        app = QtCore.QCoreApplication(sys.argv)

        handled_desktop_files_in_system = get_desktop_files_in_system()

        fs_watcher = QtCore.QFileSystemWatcher(well_known_desktop_file_locations)
        fs_watcher.directoryChanged.connect(directory_changed)

        sys.exit(app.exec_())


    if len(sys.argv) >2:
        if(os.path.isdir(sys.argv[2])):
            destination = sys.argv[2]
        else:
            print("%s is not a directory" % sys.argv[2])
            exit(1)

    desktopfile_or_directory = sys.argv[1]

    if not os.path.exists(desktopfile_or_directory):
        print("%s does not exist" % desktopfile_or_directory)
        exit(1)

    if os.path.isdir(desktopfile_or_directory):
        print("Not yet implemented")
        desktopfiles = [os.path.join(desktopfile_or_directory, f) for f in os.listdir(desktopfile_or_directory) if os.path.isfile(os.path.join(desktopfile_or_directory, f))]
        for desktopfile in desktopfiles:
            d2a(desktopfile, destination, use_generic_name)
    else:
        succeeded = d2a(desktopfile_or_directory, destination, use_generic_name)

    if succeeded == False:
        exit(1)
