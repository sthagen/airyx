#!/bin/sh
#
# Configure XOrg via dialogs
#
# For debugging purposes, pass `-d` as parameter to the script,
# in which case it will behave as if you are root and invent
# some wifi devices for you.
#

### COMMAND-LINE ARGUMENTS
#
#
if [ "x$1" = "x-d" ] ; then
  # In debug-mode, 
  #   - pretend we're root
  is_user() { 
    false
  }
else
  is_user() { 
    test "$(id -u)" != "0" 
  }
fi

### RUN-TIME DEPENDENCIES
#
# Based on the available tooling, defines the following functions:
#   - warning <text>
#     Displays the <text> as a warning, no output, no return value
#   - info <text>
#     Displays the <text> as an informational message, no output, no return
#   - pickone <item>..
#     Displays a picker for the given <item>s, outputs the selected one
if test -x /usr/bin/zenity ; then
  warning() {
    /usr/bin/zenity --warning --no-wrap --text="$1"
  }
  info() {
    /usr/bin/zenity --info --title="FuryBSD Xorg Tool" --text="$1" --width=300 --height=100
  }
  pickone() {
    /usr/bin/zenity --list --title="FuryBSD Xorg Tool" --column="0" "$@" --width=300 --height=200 --hide-header
  }
elif test -x /usr/bin/kdialog ; then
  warning() {
    /usr/bin/kdialog --title "FuryBSD Xorg Tool" --error "$1"
  }
  info() {
    /usr/bin/kdialog --title "FuryBSD Xorg Tool" --msgbox "$1"
  }
  pickone() {
    # This is kind of convoluted since we need a tag and a label
    # and 'off' for each of the options, which may contain spaces,
    # and which are passed as arguments to the function.
    local command
    command="/usr/bin/kdialog --radiolist 'Pick one'"
    for x in "$@"
    do
      command="$command '$x' '$x' off"
    done
    eval $command
  }
else
  echo "No suitable GUI found" 1>&2
  exit 1
fi

### SCRIPT PROPER
#
#
# Only run as superuser
if is_user ; then
  echo "This script must be run as root" 1>&2
  exit 1
fi

# Ensure pkg.freebsd.org is reachable first

if netstat -rn | grep default &> /dev/null
then
  echo "pkg.freebsd.org found"
else
  info "A working internet connection is required first" 
  exit 1
fi

ask=`pickone "Intel" "nVidia"`

if [ "$ask" == "Intel" ]; then
  ask=`pickone "drm-kmod" "drm-legacy-kmod" "xf86-video-intel"`
  if [ "$ask" == "drm-kmod" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install -fy drm-kmod && pkg clean -a -y
    info "Xorg will now be restarted"
    sysrc -f /etc/rc.conf kld_list+="/boot/modules/i915kms.ko"
    service kld restart
    killall Xorg
  fi
  if [ "$ask" == "drm-legacy-kmod" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install -fy drm-legacy-kmod && pkg clean -a -y
    info "Xorg will now be restarted"
    sysrc -f /etc/rc.conf kld_list+="/boot/modules/i915kms.ko"
    service kld restart
    killall Xorg
  fi
  if [ "$ask" == "xf86-video-intel" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install -fy xf86-video-intel && pkg clean -a -y
    info "Xorg will now be restarted"
    killall Xorg
  fi
fi

if [ "$ask" == "nVidia" ]; then
  ask=`pickone "nVidia Driver Latest" "nVidia Driver 390" "nVidia Driver 340"`
  if [ "$ask" == "nVidia Driver Latest" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install -fy nvidia-driver && pkg clean -a -y
    info "Xorg will now be restarted"
    sysrc -f /etc/rc.conf kld_list+="nvidia-modeset"
    service kld restart
cat <<EOF | tee /etc/X11/xorg.conf
Section "Device"
        Identifier "Card0"
        Driver     "nvidia"
EndSection
EOF
    killall Xorg
  fi
  if [ "$ask" == "nVidia Driver 390" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install -fy nvidia-driver-390 && pkg clean -a -y
    info "Xorg will now be restarted"
    sysrc -f /etc/rc.conf kld_list+="nvidia-modeset"
    service kld restart
cat <<EOF | tee /etc/X11/xorg.conf
Section "Device"
	Identifier "Card0"
	Driver     "nvidia"
EndSection
EOF
    killall Xorg
  fi
  if [ "$ask" == "nVidia Driver 340" ]; then
    rm /etc/X11/xorg.conf
    xterm -e pkg install-fy nvidia-driver-340 && pkg clean -a -y
    info "Xorg will now be restarted"
    sysrc -f /etc/rc.conf kld_list+="nvidia"
    service kld restart
cat <<EOF | tee /etc/X11/xorg.conf
Section "Device"
        Identifier "Card0"
        Driver     "nvidia"
EndSection
EOF
    killall Xorg
  fi
fi

exit 0
