/*
 * It'd be nice to automatically generate the syscall symbols, but we
 * don't know to what version they will eventually belong to, so for now
 * it has to be manual.
 */
FBSD_1.0 {
	__acl_aclcheck_fd;
	__acl_aclcheck_file;
	__acl_aclcheck_link;
	__acl_delete_fd;
	__acl_delete_file;
	__acl_delete_link;
	__acl_get_fd;
	__acl_get_file;
	__acl_get_link;
	__acl_set_fd;
	__acl_set_file;
	__acl_set_link;
	__getcwd;
	__mac_execve;
	__mac_get_fd;
	__mac_get_file;
	__mac_get_link;
	__mac_get_pid;
	__mac_get_proc;
	__mac_set_fd;
	__mac_set_file;
	__mac_set_link;
	__mac_set_proc;
	__setugid;
	__syscall;
	__sysctl;
	_exit;
	_umtx_op;
	abort2;
	access;
	acct;
	adjtime;
	aio_cancel;
	aio_error;
	aio_fsync;
	aio_read;
	aio_return;
	aio_waitcomplete;
	aio_write;
	audit;
	auditctl;
	auditon;
	bind;
	chdir;
	chflags;
	chmod;
	chown;
	chroot;
	clock_getres;
	clock_gettime;
	clock_settime;
	dup;
	dup2;
	eaccess;
	execve;
	extattr_delete_fd;
	extattr_delete_file;
	extattr_delete_link;
	extattr_get_fd;
	extattr_get_file;
	extattr_get_link;
	extattr_list_fd;
	extattr_list_file;
	extattr_list_link;
	extattr_set_fd;
	extattr_set_file;
	extattr_set_link;
	extattrctl;
	errno;
	fchdir;
	fchflags;
	fchmod;
	fchown;
	fhopen;
	flock;
	fpathconf;
	futimes;
	getaudit;
	getaudit_addr;
	getauid;
	getcontext;
	getdtablesize;
	getegid;
	geteuid;
	getfh;
	getgid;
	getgroups;
	getitimer;
	getpagesize;
	getpeername;
	getpgid;
	getpgrp;
	getpid;
	getppid;
	getpriority;
	getresgid;
	getresuid;
	getrlimit;
	getrusage;
	getsid;
	getsockname;
	getsockopt;
	gettimeofday;
	getuid;
	ioctl;
	issetugid;
	jail;
	jail_attach;
	kenv;
	kill;
	kldfind;
	kldfirstmod;
	kldload;
	kldnext;
	kldstat;
	kldsym;
	kldunload;
	kldunloadf;
	kqueue;
	kmq_notify;		/* Do we want these to be public interfaces? */
	kmq_open;		/* librt uses them to provide mq_xxx. */
	kmq_setattr;
	kmq_timedreceive;
	kmq_timedsend;
	kmq_unlink;
	ksem_close;
	ksem_destroy;
	ksem_getvalue;
	ksem_init;
	ksem_open;
	ksem_post;
	ksem_timedwait;
	ksem_trywait;
	ksem_unlink;
	ksem_wait;
	ktrace;
	lchflags;
	lchmod;
	lchown;
	lgetfh;
	link;
	lio_listio;
	listen;
	lutimes;
	mac_syscall;
	madvise;
	mincore;
	minherit;
	mkdir;
	mkfifo;
	mlock;
	mlockall;
	modfind;
	modfnext;
	modnext;
	modstat;
	mount;
	mprotect;
	msgget;
	msgrcv;
	msgsnd;
	msgsys;
	munlock;
	munlockall;
	munmap;
	nfssvc;
	nmount;
	ntp_adjtime;
	ntp_gettime;
	pathconf;
	posix_openpt;
	preadv;
	profil;
	pwritev;
	quotactl;
	readlink;
	reboot;
	rename;
	revoke;
	rfork;
	rmdir;
	rtprio;
	rtprio_thread;
	sched_get_priority_max;
	sched_get_priority_min;
	sched_getparam;
	sched_getscheduler;
	sched_rr_get_interval;
	sched_setparam;
	sched_setscheduler;
	sched_yield;
	semget;
	semop;
	semsys;
	sendfile;
	setaudit;
	setaudit_addr;
	setauid;
	setegid;
	seteuid;
	setgid;
	setgroups;
	setitimer;
	setlogin;
	setpgid;
	setpriority;
	setregid;
	setresgid;
	setresuid;
	setreuid;
	setrlimit;
	setsid;
	setsockopt;
	settimeofday;
	setuid;
	shm_unlink;
	shmat;
	shmdt;
	shmget;
	shmsys;
	shutdown;
	sigaltstack;
	sigpending;
	sigqueue;
	sigreturn;
	socket;
	socketpair;
	swapon;
	symlink;
	sync;
	sysarch;
	syscall;
	thr_create;
	thr_exit;
	thr_kill;
	thr_kill2;
	thr_new;
	thr_self;
	thr_set_name;
	thr_suspend;
	thr_wake;
	ktimer_create;		/* Do we want these to be public interfaces? */
	ktimer_delete;		/* librt uses them to provide timer_xxx. */
	ktimer_getoverrun;
	ktimer_gettime;
	ktimer_settime;
	umask;
	undelete;
	unlink;
	unmount;
	utimes;
	utrace;
	uuidgen;
	vfork;

	__error;
	ftruncate;
	lseek;
	mmap;
	pread;
	pwrite;
	truncate;
};

FBSD_1.1 {
	__semctl;
	cpuset;
	cpuset_getid;
	cpuset_setid;
	cpuset_getaffinity;
	cpuset_setaffinity;
	faccessat;
	fchmodat;
	fchownat;
	fexecve;
	futimesat;
	jail_get;
	jail_set;
	jail_remove;
	linkat;
	lpathconf;
	mkdirat;
	mkfifoat;
	msgctl;
	readlinkat;
	renameat;
	setfib;
	shmctl;
	symlinkat;
	unlinkat;
};

FBSD_1.2 {
	cap_enter;
	cap_getmode;
	getloginclass;
	getpagesizes;
	pdgetpid;
	pdkill;
	posix_fallocate;
	rctl_get_racct;
	rctl_get_rules;
	rctl_get_limits;
	rctl_add_rule;
	rctl_remove_rule;
	setloginclass;
};

FBSD_1.3 {
	aio_mlock;
	bindat;
	cap_fcntls_get;
	cap_fcntls_limit;
	cap_ioctls_get;
	cap_ioctls_limit;
	__cap_rights_get;
	cap_rights_limit;
	chflagsat;
	clock_getcpuclockid2;
	connectat;
	ffclock_getcounter;
	ffclock_getestimate;
	ffclock_setestimate;
	pipe2;
	posix_fadvise;
	procctl;
};

FBSD_1.4 {
	futimens;
	utimensat;
	ppoll;
	__iopolicysys;
	__proc_info;
	_kernelrpc_mach_vm_allocate_trap;
	_kernelrpc_mach_vm_deallocate_trap;
	_kernelrpc_mach_vm_protect_trap;
	_kernelrpc_mach_vm_map_trap;
	_kernelrpc_mach_port_allocate_trap;
	_kernelrpc_mach_port_destroy_trap;
	_kernelrpc_mach_port_deallocate_trap;
	_kernelrpc_mach_port_mod_refs_trap;
	_kernelrpc_mach_port_move_member_trap;
	_kernelrpc_mach_port_insert_right_trap;
	_kernelrpc_mach_port_insert_member_trap;
	_kernelrpc_mach_port_extract_member_trap;
	_kernelrpc_mach_port_construct_trap;
	_kernelrpc_mach_port_destruct_trap;
	mach_reply_port;
	thread_self_trap;
	task_self_trap;
	host_self_trap;
	mach_msg_trap;
	mach_msg_overwrite_trap;
	semaphore_signal_trap;
	semaphore_signal_all_trap;
	semaphore_signal_thread_trap;
	semaphore_wait_trap;
	semaphore_wait_signal_trap	;
	semaphore_timedwait_trap;
	semaphore_timedwait_signal_trap;
	_kernelrpc_mach_port_guard_trap;
	_kernelrpc_mach_port_unguard_trap;
	task_name_for_pid;
	task_for_pid;
	pid_for_task;
	macx_swapon;
	macx_swapoff;
	macx_triggers;
	swtch_pri;
	swtch;
	thread_switch;
	clock_sleep_trap;
	mach_timebase_info;
	mach_wait_until;
	mk_timer_create;
	mk_timer_destroy;
	mk_timer_arm;
	mk_timer_cancel;
	numa_setaffinity;
	numa_getaffinity;
	sendmmsg;
	recvmmsg;
};

FBSD_1.5 {
	elf_aux_info;
	fhstat;
	fhstatfs;
	fstat;
	fstatat;
	fstatfs;
	getdirentries;
	getfsstat;
	getrandom;
	mknodat;
	statfs;
	cpuset_getdomain;
	cpuset_setdomain;
};

FBSD_1.6 {
	__sysctlbyname;
	aio_readv;
	aio_writev;
	close_range;
	copy_file_range;
	fhlink;
	fhlinkat;
	fhreadlink;
	getfhat;
	funlinkat;
	shm_rename;
};

FBSD_1.7 {
	fspacectl;
	kqueuex;
	membarrier;
	sched_getcpu;
	swapoff;
	timerfd_create;
	timerfd_gettime;
	timerfd_settime;
};

FBSD_1.8 {
	 kcmp;
};

FBSDprivate_1.0 {
	/* Add entries in sort(1) order */
	__set_error_selector;
	__sigwait;
	gssd_syscall;
	nlm_syscall;
	rpctls_syscall;
};
